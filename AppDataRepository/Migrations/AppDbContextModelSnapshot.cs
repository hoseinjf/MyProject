// <auto-generated />
using System;
using AppDataRepository.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppDataRepository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppDomainCore.Admins.Entity.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.com",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("AppDomainCore.Categorys.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(388),
                            IsDelete = false,
                            Photo = "",
                            Title = "دکوراسیون ساختمان",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(391)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(393),
                            IsDelete = false,
                            Photo = "",
                            Title = "تاسیسات ساختمان",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(393)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(394),
                            IsDelete = false,
                            Photo = "",
                            Title = "وسیله نقلیه",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(395)
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(396),
                            IsDelete = false,
                            Photo = "",
                            Title = "اسبابکشی و باربری",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(396)
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(397),
                            IsDelete = false,
                            Photo = "",
                            Title = "لوازم خانگی",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(398)
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(399),
                            IsDelete = false,
                            Photo = "",
                            Title = "خدمات اداری",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(399)
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(400),
                            IsDelete = false,
                            Photo = "",
                            Title = "نظافت و بهداشت",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(400)
                        },
                        new
                        {
                            Id = 8,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(401),
                            IsDelete = false,
                            Photo = "",
                            Title = "دیجیتال و نرم افزار",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(402)
                        },
                        new
                        {
                            Id = 9,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(403),
                            IsDelete = false,
                            Photo = "",
                            Title = "پزشکی و سلامت",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(403)
                        });
                });

            modelBuilder.Entity("AppDomainCore.Comments.Entity.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomersId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomersId");

                    b.HasIndex("ExpertId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AppDomainCore.Customers.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 0.0,
                            Email = "ali@ali.com",
                            Password = "ali"
                        });
                });

            modelBuilder.Entity("AppDomainCore.CustomersRequests.Entity.CustomersRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateWork")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WorkId");

                    b.ToTable("CustomersRequests");
                });

            modelBuilder.Entity("AppDomainCore.Experts.Entity.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Experts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 0.0,
                            Email = "hasn@hasan.com",
                            Password = "hasan"
                        });
                });

            modelBuilder.Entity("AppDomainCore.ExpertsRequests.Entity.ExpertsRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomersRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateWork")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomersRequestId");

                    b.HasIndex("ExpertId");

                    b.ToTable("ExpertsRequests");
                });

            modelBuilder.Entity("AppDomainCore.Provinces.Entity.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "آذربایجان شرقی"
                        },
                        new
                        {
                            Id = 2,
                            Name = "آذربایجان غربی"
                        },
                        new
                        {
                            Id = 3,
                            Name = "اردبیل"
                        },
                        new
                        {
                            Id = 4,
                            Name = "اصفهان"
                        },
                        new
                        {
                            Id = 5,
                            Name = "البرز"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ایلام"
                        },
                        new
                        {
                            Id = 7,
                            Name = "بوشهر"
                        },
                        new
                        {
                            Id = 8,
                            Name = "تهران"
                        },
                        new
                        {
                            Id = 9,
                            Name = "چهارمحال و بختیاری"
                        },
                        new
                        {
                            Id = 10,
                            Name = "خراسان جنوبی"
                        },
                        new
                        {
                            Id = 11,
                            Name = "خراسان رضوی"
                        },
                        new
                        {
                            Id = 12,
                            Name = "خراسان شمالی"
                        },
                        new
                        {
                            Id = 13,
                            Name = "خوزستان"
                        },
                        new
                        {
                            Id = 14,
                            Name = "زنجان"
                        },
                        new
                        {
                            Id = 15,
                            Name = "سمنان"
                        },
                        new
                        {
                            Id = 16,
                            Name = "سیستان و بلوچستان"
                        },
                        new
                        {
                            Id = 17,
                            Name = "فارس"
                        },
                        new
                        {
                            Id = 18,
                            Name = "قزوین"
                        },
                        new
                        {
                            Id = 19,
                            Name = "قم"
                        },
                        new
                        {
                            Id = 20,
                            Name = "کردستان"
                        },
                        new
                        {
                            Id = 21,
                            Name = "کرمان"
                        },
                        new
                        {
                            Id = 22,
                            Name = "کرمانشاه"
                        },
                        new
                        {
                            Id = 23,
                            Name = "کهگیلویه و بویراحمد"
                        },
                        new
                        {
                            Id = 24,
                            Name = "گلستان"
                        },
                        new
                        {
                            Id = 25,
                            Name = "گیلان"
                        },
                        new
                        {
                            Id = 26,
                            Name = "لرستان"
                        },
                        new
                        {
                            Id = 27,
                            Name = "مازندران"
                        },
                        new
                        {
                            Id = 28,
                            Name = "مرکزی"
                        },
                        new
                        {
                            Id = 29,
                            Name = "هرمزگان"
                        },
                        new
                        {
                            Id = 30,
                            Name = "همدان"
                        },
                        new
                        {
                            Id = 31,
                            Name = "یزد"
                        });
                });

            modelBuilder.Entity("AppDomainCore.Roles.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AppDomainCore.SubCategorys.Entity.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(432),
                            IsDelete = false,
                            Photo = "",
                            Title = "بنایی",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(432)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(434),
                            IsDelete = false,
                            Photo = "",
                            Title = "دکوراسیون",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(435)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(436),
                            IsDelete = false,
                            Photo = "",
                            Title = "نقاشی ساختمان",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(436)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(437),
                            IsDelete = false,
                            Photo = "",
                            Title = "درب و پنجره",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(438)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(439),
                            IsDelete = false,
                            Photo = "",
                            Title = "آهنگری و جوشکاری",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(439)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(440),
                            IsDelete = false,
                            Photo = "",
                            Title = "باغبانی",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(440)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(441),
                            IsDelete = false,
                            Photo = "",
                            Title = "سرمایش و گرمایش",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(442)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(443),
                            IsDelete = false,
                            Photo = "",
                            Title = "لوله کشی",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(443)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(444),
                            IsDelete = false,
                            Photo = "",
                            Title = "برقو الکترونیک",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(445)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(446),
                            IsDelete = false,
                            Photo = "",
                            Title = "تلفن و سانترال",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(446)
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(447),
                            IsDelete = false,
                            Photo = "",
                            Title = "خودرو",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(447)
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(448),
                            IsDelete = false,
                            Photo = "",
                            Title = "اسبابکشی",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(449)
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(450),
                            IsDelete = false,
                            Photo = "",
                            Title = "حمل بار",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(450)
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(451),
                            IsDelete = false,
                            Photo = "",
                            Title = "لوازم آشپزخانه",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(452)
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 5,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(453),
                            IsDelete = false,
                            Photo = "",
                            Title = "لوازم شست و شو",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(453)
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 5,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(454),
                            IsDelete = false,
                            Photo = "",
                            Title = "لوازم صوتی و تصویری",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(454)
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 6,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(455),
                            IsDelete = false,
                            Photo = "",
                            Title = "ماشین آلات اداری",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(456)
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 6,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(457),
                            IsDelete = false,
                            Photo = "",
                            Title = "مبلمان اداری",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(457)
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 7,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(458),
                            IsDelete = false,
                            Photo = "",
                            Title = "نظافت",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(458)
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 7,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(459),
                            IsDelete = false,
                            Photo = "",
                            Title = "خشک شویی و اتوشویی",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(460)
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 7,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(461),
                            IsDelete = false,
                            Photo = "",
                            Title = "قالی شویی و مبل شویی",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(461)
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 7,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(462),
                            IsDelete = false,
                            Photo = "",
                            Title = "سمپاشی",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(462)
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 8,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(463),
                            IsDelete = false,
                            Photo = "",
                            Title = "موبایل و تبلت",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(464)
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 8,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(465),
                            IsDelete = false,
                            Photo = "",
                            Title = "خدمات کامپیوتری",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(465)
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 8,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(466),
                            IsDelete = false,
                            Photo = "",
                            Title = "امنیت و شبکه",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(467)
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 9,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(468),
                            IsDelete = false,
                            Photo = "",
                            Title = "معاینه پزشک",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(468)
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 9,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(469),
                            IsDelete = false,
                            Photo = "",
                            Title = "داروخانه",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(469)
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 9,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(470),
                            IsDelete = false,
                            Photo = "",
                            Title = "مشاوره",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(471)
                        });
                });

            modelBuilder.Entity("AppDomainCore.Users.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AppDomainCore.Works.Entity.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CorePrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Viwe")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Works");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorePrice = 500.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(539),
                            Description = "انجام انواع امور پی ریزی",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 1,
                            Title = "پی ریزی",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(540),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 2,
                            CorePrice = 1000.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(544),
                            Description = "انجام انواع امور بلوک گذاری و دیوار چینی",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 1,
                            Title = "بلوک گذاری و دیوار چینی",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(544),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 3,
                            CorePrice = 600.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(545),
                            Description = "انجام انواع امور مرتبط با کف ساختمان",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 1,
                            Title = "کف ساختمان",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(546),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 4,
                            CorePrice = 6000.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(547),
                            Description = "انجام انواع امور نوسازی ساختمان های قدیمی یا نیازمند تغییر",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 1,
                            Title = "نوسازی",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(547),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 5,
                            CorePrice = 500.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(548),
                            Description = "انجام انواع امور سیمان کاری",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 1,
                            Title = "سیمان کاری",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(549),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 6,
                            CorePrice = 500.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(550),
                            Description = "انجام انواع امور دکور آشپزخانه",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 2,
                            Title = "دکور آشپزخانه",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(550),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 7,
                            CorePrice = 580.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(552),
                            Description = "انجام انواع امور دکور حال و پذیرایی",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 2,
                            Title = "دکور حال و پذیرایی",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(552),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 8,
                            CorePrice = 400.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(553),
                            Description = "انجام انواع امور دکور اتاق خواب",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 2,
                            Title = "دکور اتاق خواب",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(554),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 9,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(555),
                            Description = "انجام انواع امور طراحی و دیزاین ساختمان",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 2,
                            Title = "طراحی و دیزاین ساختمان",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(555),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 10,
                            CorePrice = 1500.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(557),
                            Description = "انجام انواع امور معماری داخلی",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 2,
                            Title = "معماری داخلی",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(557),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 11,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(558),
                            Description = "انجام انواع امور نقاشی داخل ساختمان",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 3,
                            Title = "نقاشی داخل ساختمان",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(559),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 12,
                            CorePrice = 300.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(560),
                            Description = "انجام انواع امور نقاشی خارج ساختمان",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 3,
                            Title = "نقاشی خارج ساختمان",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(560),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 13,
                            CorePrice = 200.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(561),
                            Description = "انجام انواع امور تعمیرات درب و پنجره",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 4,
                            Title = "تعمیرات درب و پنجره",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(562),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 14,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(563),
                            Description = "انجام انواع امور سفارش درب و پنجرهن",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 4,
                            Title = "سفارش درب و پنجره",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(564),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 15,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(565),
                            Description = "انجام انواع امور آهنگری و جوشکاری لوازم و غیره",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 5,
                            Title = "آهنگری و جوشکاری لوازم و غیره",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(565),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 16,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(566),
                            Description = "انجام انواع امور آهنگری و جوشکاری ساختمانی",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 5,
                            Title = "آهنگری و جوشکاری ساختمانی",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(567),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 17,
                            CorePrice = 500.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(568),
                            Description = "انجام انواع امور باغبانی ساختمان ها ومجتمع ها",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 6,
                            Title = "باغبانی ساختمان ها ومجتمع ها ",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(568),
                            Viwe = 0
                        },
                        new
                        {
                            Id = 18,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(570),
                            Description = "انجام انواع امور باغبانی فضای شهری و سازمان ها",
                            IsDelete = false,
                            Photo = "",
                            SubCategoryId = 6,
                            Title = "باغبانی فضای شهری و سازمان ها",
                            UpdateAt = new DateTime(2025, 2, 13, 14, 21, 4, 569, DateTimeKind.Utc).AddTicks(570),
                            Viwe = 0
                        });
                });

            modelBuilder.Entity("ExpertWork", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("WorksId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "WorksId");

                    b.HasIndex("WorksId");

                    b.ToTable("ExpertWork");
                });

            modelBuilder.Entity("AppDomainCore.Admins.Entity.Admin", b =>
                {
                    b.HasOne("AppDomainCore.Provinces.Entity.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("AppDomainCore.Comments.Entity.Comment", b =>
                {
                    b.HasOne("AppDomainCore.Customers.Entity.Customer", "Customers")
                        .WithMany("Comments")
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Experts.Entity.Expert", "Experts")
                        .WithMany("Comments")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("Experts");
                });

            modelBuilder.Entity("AppDomainCore.Customers.Entity.Customer", b =>
                {
                    b.HasOne("AppDomainCore.Provinces.Entity.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("AppDomainCore.CustomersRequests.Entity.CustomersRequest", b =>
                {
                    b.HasOne("AppDomainCore.Customers.Entity.Customer", "Customer")
                        .WithMany("CustomersRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Works.Entity.Work", "Work")
                        .WithMany("Customers")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("AppDomainCore.Experts.Entity.Expert", b =>
                {
                    b.HasOne("AppDomainCore.Provinces.Entity.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("AppDomainCore.ExpertsRequests.Entity.ExpertsRequest", b =>
                {
                    b.HasOne("AppDomainCore.CustomersRequests.Entity.CustomersRequest", "CustomersRequest")
                        .WithMany()
                        .HasForeignKey("CustomersRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Experts.Entity.Expert", "Expert")
                        .WithMany("ExpertsRequests")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomersRequest");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("AppDomainCore.SubCategorys.Entity.SubCategory", b =>
                {
                    b.HasOne("AppDomainCore.Categorys.Entity.Category", "Category")
                        .WithMany("subCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AppDomainCore.Users.Entity.User", b =>
                {
                    b.HasOne("AppDomainCore.Provinces.Entity.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("AppDomainCore.Works.Entity.Work", b =>
                {
                    b.HasOne("AppDomainCore.SubCategorys.Entity.SubCategory", "SubCategory")
                        .WithMany("works")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("ExpertWork", b =>
                {
                    b.HasOne("AppDomainCore.Experts.Entity.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Works.Entity.Work", null)
                        .WithMany()
                        .HasForeignKey("WorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDomainCore.Categorys.Entity.Category", b =>
                {
                    b.Navigation("subCategories");
                });

            modelBuilder.Entity("AppDomainCore.Customers.Entity.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CustomersRequests");
                });

            modelBuilder.Entity("AppDomainCore.Experts.Entity.Expert", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ExpertsRequests");
                });

            modelBuilder.Entity("AppDomainCore.SubCategorys.Entity.SubCategory", b =>
                {
                    b.Navigation("works");
                });

            modelBuilder.Entity("AppDomainCore.Works.Entity.Work", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
