// <auto-generated />
using System;
using AppDataRepository.Db.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppDataRepository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250221002141_init2")]
    partial class init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppDomainCore.Admins.Entity.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("AppDomainCore.Categorys.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1154),
                            IsDelete = false,
                            Title = "دکوراسیون ساختمان",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1156)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1158),
                            IsDelete = false,
                            Title = "تاسیسات ساختمان",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1158)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1159),
                            IsDelete = false,
                            Title = "وسیله نقلیه",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1159)
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1160),
                            IsDelete = false,
                            Title = "اسبابکشی و باربری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1160)
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1161),
                            IsDelete = false,
                            Title = "لوازم خانگی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1162)
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1163),
                            IsDelete = false,
                            Title = "خدمات اداری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1163)
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1164),
                            IsDelete = false,
                            Title = "نظافت و بهداشت",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1164)
                        },
                        new
                        {
                            Id = 8,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1165),
                            IsDelete = false,
                            Title = "دیجیتال و نرم افزار",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1166)
                        },
                        new
                        {
                            Id = 9,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1167),
                            IsDelete = false,
                            Title = "پزشکی و سلامت",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 919, DateTimeKind.Utc).AddTicks(1167)
                        });
                });

            modelBuilder.Entity("AppDomainCore.Comments.Entity.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomersId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomersId");

                    b.HasIndex("ExpertId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AppDomainCore.Customers.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("AppDomainCore.CustomersRequests.Entity.CustomersRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateWork")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WorkId");

                    b.ToTable("CustomersRequests");
                });

            modelBuilder.Entity("AppDomainCore.Experts.Entity.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Experts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "asd",
                            Score = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Biography = "ased",
                            Score = 0,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Biography = "asdsd",
                            Score = 0,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("AppDomainCore.ExpertsRequests.Entity.ExpertsRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomersRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateWork")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomersRequestId");

                    b.HasIndex("ExpertId");

                    b.ToTable("ExpertsRequests");
                });

            modelBuilder.Entity("AppDomainCore.Photos.Entity.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Src = "ss"
                        },
                        new
                        {
                            Id = 2,
                            Src = "sqs"
                        },
                        new
                        {
                            Id = 3,
                            Src = "ee"
                        },
                        new
                        {
                            Id = 4,
                            Src = "rr"
                        },
                        new
                        {
                            Id = 5,
                            Src = "tt"
                        },
                        new
                        {
                            Id = 6,
                            Src = "yy"
                        },
                        new
                        {
                            Id = 7,
                            Src = "uu"
                        });
                });

            modelBuilder.Entity("AppDomainCore.Provinces.Entity.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "آذربایجان شرقی"
                        },
                        new
                        {
                            Id = 2,
                            Name = "آذربایجان غربی"
                        },
                        new
                        {
                            Id = 3,
                            Name = "اردبیل"
                        },
                        new
                        {
                            Id = 4,
                            Name = "اصفهان"
                        },
                        new
                        {
                            Id = 5,
                            Name = "البرز"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ایلام"
                        },
                        new
                        {
                            Id = 7,
                            Name = "بوشهر"
                        },
                        new
                        {
                            Id = 8,
                            Name = "تهران"
                        },
                        new
                        {
                            Id = 9,
                            Name = "چهارمحال و بختیاری"
                        },
                        new
                        {
                            Id = 10,
                            Name = "خراسان جنوبی"
                        },
                        new
                        {
                            Id = 11,
                            Name = "خراسان رضوی"
                        },
                        new
                        {
                            Id = 12,
                            Name = "خراسان شمالی"
                        },
                        new
                        {
                            Id = 13,
                            Name = "خوزستان"
                        },
                        new
                        {
                            Id = 14,
                            Name = "زنجان"
                        },
                        new
                        {
                            Id = 15,
                            Name = "سمنان"
                        },
                        new
                        {
                            Id = 16,
                            Name = "سیستان و بلوچستان"
                        },
                        new
                        {
                            Id = 17,
                            Name = "فارس"
                        },
                        new
                        {
                            Id = 18,
                            Name = "قزوین"
                        },
                        new
                        {
                            Id = 19,
                            Name = "قم"
                        },
                        new
                        {
                            Id = 20,
                            Name = "کردستان"
                        },
                        new
                        {
                            Id = 21,
                            Name = "کرمان"
                        },
                        new
                        {
                            Id = 22,
                            Name = "کرمانشاه"
                        },
                        new
                        {
                            Id = 23,
                            Name = "کهگیلویه و بویراحمد"
                        },
                        new
                        {
                            Id = 24,
                            Name = "گلستان"
                        },
                        new
                        {
                            Id = 25,
                            Name = "گیلان"
                        },
                        new
                        {
                            Id = 26,
                            Name = "لرستان"
                        },
                        new
                        {
                            Id = 27,
                            Name = "مازندران"
                        },
                        new
                        {
                            Id = 28,
                            Name = "مرکزی"
                        },
                        new
                        {
                            Id = 29,
                            Name = "هرمزگان"
                        },
                        new
                        {
                            Id = 30,
                            Name = "همدان"
                        },
                        new
                        {
                            Id = 31,
                            Name = "یزد"
                        });
                });

            modelBuilder.Entity("AppDomainCore.SubCategorys.Entity.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8426),
                            IsDelete = false,
                            Title = "بنایی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8427)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8430),
                            IsDelete = false,
                            Title = "دکوراسیون",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8430)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8431),
                            IsDelete = false,
                            Title = "نقاشی ساختمان",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8432)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8433),
                            IsDelete = false,
                            Title = "درب و پنجره",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8433)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8441),
                            IsDelete = false,
                            Title = "آهنگری و جوشکاری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8442)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8443),
                            IsDelete = false,
                            Title = "باغبانی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8443)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8444),
                            IsDelete = false,
                            Title = "سرمایش و گرمایش",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8444)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8445),
                            IsDelete = false,
                            Title = "لوله کشی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8446)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8469),
                            IsDelete = false,
                            Title = "برقو الکترونیک",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8470)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8471),
                            IsDelete = false,
                            Title = "تلفن و سانترال",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8471)
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8472),
                            IsDelete = false,
                            Title = "خودرو",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8473)
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8474),
                            IsDelete = false,
                            Title = "اسبابکشی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8474)
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8475),
                            IsDelete = false,
                            Title = "حمل بار",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8475)
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8476),
                            IsDelete = false,
                            Title = "لوازم آشپزخانه",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8477)
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 5,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8478),
                            IsDelete = false,
                            Title = "لوازم شست و شو",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8478)
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 5,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8479),
                            IsDelete = false,
                            Title = "لوازم صوتی و تصویری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8479)
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 6,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8480),
                            IsDelete = false,
                            Title = "ماشین آلات اداری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8481)
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 6,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8482),
                            IsDelete = false,
                            Title = "مبلمان اداری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8482)
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 7,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8483),
                            IsDelete = false,
                            Title = "نظافت",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8484)
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 7,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8485),
                            IsDelete = false,
                            Title = "خشک شویی و اتوشویی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8485)
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 7,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8486),
                            IsDelete = false,
                            Title = "قالی شویی و مبل شویی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8487)
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 7,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8488),
                            IsDelete = false,
                            Title = "سمپاشی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8488)
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 8,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8489),
                            IsDelete = false,
                            Title = "موبایل و تبلت",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8490)
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 8,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8491),
                            IsDelete = false,
                            Title = "خدمات کامپیوتری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8491)
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 8,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8492),
                            IsDelete = false,
                            Title = "امنیت و شبکه",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8492)
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 9,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8493),
                            IsDelete = false,
                            Title = "معاینه پزشک",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8494)
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 9,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8495),
                            IsDelete = false,
                            Title = "داروخانه",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8495)
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 9,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8496),
                            IsDelete = false,
                            Title = "مشاوره",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 920, DateTimeKind.Utc).AddTicks(8496)
                        });
                });

            modelBuilder.Entity("AppDomainCore.Users.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            ConcurrencyStamp = "f11a9bb1-fbb0-445d-b281-af035ebbfac3",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH1AHQpheg88CfGTmxa9GH/y3YA9k8fbZs78es+uyUHoqJ1hJEK7Alr+Wyddt7XgCw==",
                            Phone = "09121111111",
                            PhoneNumberConfirmed = false,
                            PhotoId = 1,
                            ProvinceId = 1,
                            SecurityStamp = "fe8134df-0202-45b5-9265-49240c7a1550",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            ConcurrencyStamp = "745119f2-ade7-4056-b0c2-d185a462f602",
                            Email = "expert@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EXPERT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAg82t8DESQBKUABx7o5CTilm++d62brOxsozQcH+HCVSeqayx6eNTBBQOHdObS+8A==",
                            Phone = "09121111112",
                            PhoneNumberConfirmed = false,
                            PhotoId = 2,
                            ProvinceId = 2,
                            SecurityStamp = "7db83336-dbc9-4a49-9a4d-e51c567127da",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            ConcurrencyStamp = "0645c710-4b94-474f-adf5-4910617060ef",
                            Email = "expert@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EXPERT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHhhdwh1kPtScO1F3hZWkpQ3I4uNQQiREvi+Q5m3NfWuTGY9awLMJFgtP186rfEgtg==",
                            Phone = "09121111112",
                            PhoneNumberConfirmed = false,
                            PhotoId = 3,
                            ProvinceId = 3,
                            SecurityStamp = "576fdf09-ad2c-4854-a157-468f2a259208",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            ConcurrencyStamp = "53a00731-0a4f-42bd-acce-8dfd4ada9c47",
                            Email = "expert@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EXPERT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPyfSZQ5xX5sPV71I8RQrEjl87Yd6IVkG8uHYTyH0Qv6DWaETXi8MT+sb7nZY2RBlQ==",
                            Phone = "09121111112",
                            PhoneNumberConfirmed = false,
                            PhotoId = 4,
                            ProvinceId = 4,
                            SecurityStamp = "b222e75e-04f1-4a84-b21f-dfa3d26c39d2",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            ConcurrencyStamp = "4bdb7caa-e399-4c7f-b711-c88b009b97c7",
                            Email = "customer@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COSTOMER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGQmkYU5TwoHvu++XB9sTr6+R6Yg8XuEtlAp0h4JeXGBq7hw8lQn/V3aYz1UNEq/6g==",
                            Phone = "09121111112",
                            PhoneNumberConfirmed = false,
                            PhotoId = 5,
                            ProvinceId = 5,
                            SecurityStamp = "acd71094-03e1-471c-b7a0-5eb7c109e835",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            ConcurrencyStamp = "81f64289-01d3-41a4-9a81-42008952298a",
                            Email = "customer@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COSTOMER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB4Ehyb/KrGbNUR0pXQD4phDfUlTX+ULlN7qHqvgHHazyqCCmz7B8Zg425k+sZtVzQ==",
                            Phone = "09121111112",
                            PhoneNumberConfirmed = false,
                            PhotoId = 6,
                            ProvinceId = 6,
                            SecurityStamp = "e721a8dc-c886-413f-80f7-acef03f673d0",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            ConcurrencyStamp = "43be1897-1038-43c1-96d4-065de91c5415",
                            Email = "customer@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COSTOMER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEmLJRvQf5uw0GMs04vZCxZoAdRIXv0V/x6rcQaP4QXsH/XBaX5GeXzRKELXGWo+Jw==",
                            Phone = "09121111112",
                            PhoneNumberConfirmed = false,
                            PhotoId = 7,
                            ProvinceId = 7,
                            SecurityStamp = "5845a6e3-f73f-4873-974b-7a3d6a37b682",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("AppDomainCore.Works.Entity.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CorePrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Viwe")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Works");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorePrice = 500.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1222),
                            Description = "انجام انواع امور پی ریزی",
                            IsDelete = false,
                            SubCategoryId = 1,
                            Title = "پی ریزی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1223)
                        },
                        new
                        {
                            Id = 2,
                            CorePrice = 1000.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1227),
                            Description = "انجام انواع امور بلوک گذاری و دیوار چینی",
                            IsDelete = false,
                            SubCategoryId = 1,
                            Title = "بلوک گذاری و دیوار چینی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1227)
                        },
                        new
                        {
                            Id = 3,
                            CorePrice = 600.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1229),
                            Description = "انجام انواع امور مرتبط با کف ساختمان",
                            IsDelete = false,
                            SubCategoryId = 1,
                            Title = "کف ساختمان",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1229)
                        },
                        new
                        {
                            Id = 4,
                            CorePrice = 6000.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1230),
                            Description = "انجام انواع امور نوسازی ساختمان های قدیمی یا نیازمند تغییر",
                            IsDelete = false,
                            SubCategoryId = 1,
                            Title = "نوسازی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1231)
                        },
                        new
                        {
                            Id = 5,
                            CorePrice = 500.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1232),
                            Description = "انجام انواع امور سیمان کاری",
                            IsDelete = false,
                            SubCategoryId = 1,
                            Title = "سیمان کاری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1232)
                        },
                        new
                        {
                            Id = 6,
                            CorePrice = 500.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1234),
                            Description = "انجام انواع امور دکور آشپزخانه",
                            IsDelete = false,
                            SubCategoryId = 2,
                            Title = "دکور آشپزخانه",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1234)
                        },
                        new
                        {
                            Id = 7,
                            CorePrice = 580.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1235),
                            Description = "انجام انواع امور دکور حال و پذیرایی",
                            IsDelete = false,
                            SubCategoryId = 2,
                            Title = "دکور حال و پذیرایی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1236)
                        },
                        new
                        {
                            Id = 8,
                            CorePrice = 400.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1237),
                            Description = "انجام انواع امور دکور اتاق خواب",
                            IsDelete = false,
                            SubCategoryId = 2,
                            Title = "دکور اتاق خواب",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1237)
                        },
                        new
                        {
                            Id = 9,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1239),
                            Description = "انجام انواع امور طراحی و دیزاین ساختمان",
                            IsDelete = false,
                            SubCategoryId = 2,
                            Title = "طراحی و دیزاین ساختمان",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1239)
                        },
                        new
                        {
                            Id = 10,
                            CorePrice = 1500.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1240),
                            Description = "انجام انواع امور معماری داخلی",
                            IsDelete = false,
                            SubCategoryId = 2,
                            Title = "معماری داخلی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1241)
                        },
                        new
                        {
                            Id = 11,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1242),
                            Description = "انجام انواع امور نقاشی داخل ساختمان",
                            IsDelete = false,
                            SubCategoryId = 3,
                            Title = "نقاشی داخل ساختمان",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1242)
                        },
                        new
                        {
                            Id = 12,
                            CorePrice = 300.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1244),
                            Description = "انجام انواع امور نقاشی خارج ساختمان",
                            IsDelete = false,
                            SubCategoryId = 3,
                            Title = "نقاشی خارج ساختمان",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1244)
                        },
                        new
                        {
                            Id = 13,
                            CorePrice = 200.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1245),
                            Description = "انجام انواع امور تعمیرات درب و پنجره",
                            IsDelete = false,
                            SubCategoryId = 4,
                            Title = "تعمیرات درب و پنجره",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1246)
                        },
                        new
                        {
                            Id = 14,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1247),
                            Description = "انجام انواع امور سفارش درب و پنجرهن",
                            IsDelete = false,
                            SubCategoryId = 4,
                            Title = "سفارش درب و پنجره",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1248)
                        },
                        new
                        {
                            Id = 15,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1249),
                            Description = "انجام انواع امور آهنگری و جوشکاری لوازم و غیره",
                            IsDelete = false,
                            SubCategoryId = 5,
                            Title = "آهنگری و جوشکاری لوازم و غیره",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1249)
                        },
                        new
                        {
                            Id = 16,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1250),
                            Description = "انجام انواع امور آهنگری و جوشکاری ساختمانی",
                            IsDelete = false,
                            SubCategoryId = 5,
                            Title = "آهنگری و جوشکاری ساختمانی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1251)
                        },
                        new
                        {
                            Id = 17,
                            CorePrice = 500.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1252),
                            Description = "انجام انواع امور باغبانی ساختمان ها ومجتمع ها",
                            IsDelete = false,
                            SubCategoryId = 6,
                            Title = "باغبانی ساختمان ها ومجتمع ها ",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1252)
                        },
                        new
                        {
                            Id = 18,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1254),
                            Description = "انجام انواع امور باغبانی فضای شهری و سازمان ها",
                            IsDelete = false,
                            SubCategoryId = 6,
                            Title = "باغبانی فضای شهری و سازمان ها",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 21, 39, 921, DateTimeKind.Utc).AddTicks(1254)
                        });
                });

            modelBuilder.Entity("ExpertWork", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("WorksId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "WorksId");

                    b.HasIndex("WorksId");

                    b.ToTable("ExpertWork");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppDomainCore.Admins.Entity.Admin", b =>
                {
                    b.HasOne("AppDomainCore.Users.Entity.User", "user")
                        .WithOne("Admins")
                        .HasForeignKey("AppDomainCore.Admins.Entity.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("AppDomainCore.Categorys.Entity.Category", b =>
                {
                    b.HasOne("AppDomainCore.Photos.Entity.Photo", "Photo")
                        .WithOne("Category")
                        .HasForeignKey("AppDomainCore.Categorys.Entity.Category", "PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("AppDomainCore.Comments.Entity.Comment", b =>
                {
                    b.HasOne("AppDomainCore.Customers.Entity.Customer", "Customers")
                        .WithMany("Comments")
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Experts.Entity.Expert", "Experts")
                        .WithMany("Comments")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("Experts");
                });

            modelBuilder.Entity("AppDomainCore.Customers.Entity.Customer", b =>
                {
                    b.HasOne("AppDomainCore.Users.Entity.User", "User")
                        .WithOne("Customers")
                        .HasForeignKey("AppDomainCore.Customers.Entity.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppDomainCore.CustomersRequests.Entity.CustomersRequest", b =>
                {
                    b.HasOne("AppDomainCore.Customers.Entity.Customer", "Customer")
                        .WithMany("CustomersRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Works.Entity.Work", "Work")
                        .WithMany("Customers")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("AppDomainCore.Experts.Entity.Expert", b =>
                {
                    b.HasOne("AppDomainCore.Users.Entity.User", "User")
                        .WithOne("Experts")
                        .HasForeignKey("AppDomainCore.Experts.Entity.Expert", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppDomainCore.ExpertsRequests.Entity.ExpertsRequest", b =>
                {
                    b.HasOne("AppDomainCore.CustomersRequests.Entity.CustomersRequest", "CustomersRequest")
                        .WithMany()
                        .HasForeignKey("CustomersRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Experts.Entity.Expert", "Expert")
                        .WithMany("ExpertsRequests")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomersRequest");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("AppDomainCore.Photos.Entity.Photo", b =>
                {
                    b.HasOne("AppDomainCore.CustomersRequests.Entity.CustomersRequest", "Customer")
                        .WithMany("Photo")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AppDomainCore.SubCategorys.Entity.SubCategory", b =>
                {
                    b.HasOne("AppDomainCore.Categorys.Entity.Category", "Category")
                        .WithMany("subCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Photos.Entity.Photo", "Photo")
                        .WithOne("SubCategory")
                        .HasForeignKey("AppDomainCore.SubCategorys.Entity.SubCategory", "PhotoId");

                    b.Navigation("Category");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("AppDomainCore.Users.Entity.User", b =>
                {
                    b.HasOne("AppDomainCore.Photos.Entity.Photo", "Photo")
                        .WithOne("User")
                        .HasForeignKey("AppDomainCore.Users.Entity.User", "PhotoId");

                    b.HasOne("AppDomainCore.Provinces.Entity.Province", "Province")
                        .WithMany("User")
                        .HasForeignKey("ProvinceId");

                    b.Navigation("Photo");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("AppDomainCore.Works.Entity.Work", b =>
                {
                    b.HasOne("AppDomainCore.Photos.Entity.Photo", "Photo")
                        .WithOne("Work")
                        .HasForeignKey("AppDomainCore.Works.Entity.Work", "PhotoId");

                    b.HasOne("AppDomainCore.SubCategorys.Entity.SubCategory", "SubCategory")
                        .WithMany("works")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("ExpertWork", b =>
                {
                    b.HasOne("AppDomainCore.Experts.Entity.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Works.Entity.Work", null)
                        .WithMany()
                        .HasForeignKey("WorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AppDomainCore.Users.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AppDomainCore.Users.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Users.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AppDomainCore.Users.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDomainCore.Categorys.Entity.Category", b =>
                {
                    b.Navigation("subCategories");
                });

            modelBuilder.Entity("AppDomainCore.Customers.Entity.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CustomersRequests");
                });

            modelBuilder.Entity("AppDomainCore.CustomersRequests.Entity.CustomersRequest", b =>
                {
                    b.Navigation("Photo");
                });

            modelBuilder.Entity("AppDomainCore.Experts.Entity.Expert", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ExpertsRequests");
                });

            modelBuilder.Entity("AppDomainCore.Photos.Entity.Photo", b =>
                {
                    b.Navigation("Category");

                    b.Navigation("SubCategory");

                    b.Navigation("User");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("AppDomainCore.Provinces.Entity.Province", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("AppDomainCore.SubCategorys.Entity.SubCategory", b =>
                {
                    b.Navigation("works");
                });

            modelBuilder.Entity("AppDomainCore.Users.Entity.User", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Customers");

                    b.Navigation("Experts");
                });

            modelBuilder.Entity("AppDomainCore.Works.Entity.Work", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
