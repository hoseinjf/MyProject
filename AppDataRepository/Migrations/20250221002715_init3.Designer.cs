// <auto-generated />
using System;
using AppDataRepository.Db.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppDataRepository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250221002715_init3")]
    partial class init3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppDomainCore.Admins.Entity.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("AppDomainCore.Categorys.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3785),
                            IsDelete = false,
                            Title = "دکوراسیون ساختمان",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3789)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3790),
                            IsDelete = false,
                            Title = "تاسیسات ساختمان",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3791)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3792),
                            IsDelete = false,
                            Title = "وسیله نقلیه",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3792)
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3793),
                            IsDelete = false,
                            Title = "اسبابکشی و باربری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3793)
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3794),
                            IsDelete = false,
                            Title = "لوازم خانگی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3795)
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3795),
                            IsDelete = false,
                            Title = "خدمات اداری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3796)
                        },
                        new
                        {
                            Id = 7,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3797),
                            IsDelete = false,
                            Title = "نظافت و بهداشت",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3797)
                        },
                        new
                        {
                            Id = 8,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3798),
                            IsDelete = false,
                            Title = "دیجیتال و نرم افزار",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3798)
                        },
                        new
                        {
                            Id = 9,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3799),
                            IsDelete = false,
                            Title = "پزشکی و سلامت",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 728, DateTimeKind.Utc).AddTicks(3800)
                        });
                });

            modelBuilder.Entity("AppDomainCore.Comments.Entity.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomersId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomersId");

                    b.HasIndex("ExpertId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AppDomainCore.Customers.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("AppDomainCore.CustomersRequests.Entity.CustomersRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateWork")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WorkId");

                    b.ToTable("CustomersRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2025, 2, 21, 3, 57, 13, 729, DateTimeKind.Local).AddTicks(4204),
                            CustomerId = 1,
                            DateWork = new DateTime(2025, 2, 21, 3, 57, 13, 729, DateTimeKind.Local).AddTicks(4219),
                            Description = "Description",
                            IsDelete = false,
                            Status = 3,
                            UpdateAt = new DateTime(2025, 2, 21, 3, 57, 13, 729, DateTimeKind.Local).AddTicks(4220),
                            WorkId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2025, 2, 21, 3, 57, 13, 729, DateTimeKind.Local).AddTicks(4222),
                            CustomerId = 2,
                            DateWork = new DateTime(2025, 2, 21, 3, 57, 13, 729, DateTimeKind.Local).AddTicks(4222),
                            Description = "Description",
                            IsDelete = false,
                            Status = 4,
                            UpdateAt = new DateTime(2025, 2, 21, 3, 57, 13, 729, DateTimeKind.Local).AddTicks(4223),
                            WorkId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2025, 2, 21, 3, 57, 13, 729, DateTimeKind.Local).AddTicks(4224),
                            CustomerId = 3,
                            DateWork = new DateTime(2025, 2, 21, 3, 57, 13, 729, DateTimeKind.Local).AddTicks(4225),
                            Description = "Description",
                            IsDelete = false,
                            Status = 1,
                            UpdateAt = new DateTime(2025, 2, 21, 3, 57, 13, 729, DateTimeKind.Local).AddTicks(4230),
                            WorkId = 3
                        });
                });

            modelBuilder.Entity("AppDomainCore.Experts.Entity.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Experts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "asd",
                            Score = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Biography = "ased",
                            Score = 0,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Biography = "asdsd",
                            Score = 0,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("AppDomainCore.ExpertsRequests.Entity.ExpertsRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomersRequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateWork")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomersRequestId");

                    b.HasIndex("ExpertId");

                    b.ToTable("ExpertsRequests");
                });

            modelBuilder.Entity("AppDomainCore.Photos.Entity.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Src = "ss"
                        },
                        new
                        {
                            Id = 2,
                            Src = "sqs"
                        },
                        new
                        {
                            Id = 3,
                            Src = "ee"
                        },
                        new
                        {
                            Id = 4,
                            Src = "rr"
                        },
                        new
                        {
                            Id = 5,
                            Src = "tt"
                        },
                        new
                        {
                            Id = 6,
                            Src = "yy"
                        },
                        new
                        {
                            Id = 7,
                            Src = "uu"
                        });
                });

            modelBuilder.Entity("AppDomainCore.Provinces.Entity.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "آذربایجان شرقی"
                        },
                        new
                        {
                            Id = 2,
                            Name = "آذربایجان غربی"
                        },
                        new
                        {
                            Id = 3,
                            Name = "اردبیل"
                        },
                        new
                        {
                            Id = 4,
                            Name = "اصفهان"
                        },
                        new
                        {
                            Id = 5,
                            Name = "البرز"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ایلام"
                        },
                        new
                        {
                            Id = 7,
                            Name = "بوشهر"
                        },
                        new
                        {
                            Id = 8,
                            Name = "تهران"
                        },
                        new
                        {
                            Id = 9,
                            Name = "چهارمحال و بختیاری"
                        },
                        new
                        {
                            Id = 10,
                            Name = "خراسان جنوبی"
                        },
                        new
                        {
                            Id = 11,
                            Name = "خراسان رضوی"
                        },
                        new
                        {
                            Id = 12,
                            Name = "خراسان شمالی"
                        },
                        new
                        {
                            Id = 13,
                            Name = "خوزستان"
                        },
                        new
                        {
                            Id = 14,
                            Name = "زنجان"
                        },
                        new
                        {
                            Id = 15,
                            Name = "سمنان"
                        },
                        new
                        {
                            Id = 16,
                            Name = "سیستان و بلوچستان"
                        },
                        new
                        {
                            Id = 17,
                            Name = "فارس"
                        },
                        new
                        {
                            Id = 18,
                            Name = "قزوین"
                        },
                        new
                        {
                            Id = 19,
                            Name = "قم"
                        },
                        new
                        {
                            Id = 20,
                            Name = "کردستان"
                        },
                        new
                        {
                            Id = 21,
                            Name = "کرمان"
                        },
                        new
                        {
                            Id = 22,
                            Name = "کرمانشاه"
                        },
                        new
                        {
                            Id = 23,
                            Name = "کهگیلویه و بویراحمد"
                        },
                        new
                        {
                            Id = 24,
                            Name = "گلستان"
                        },
                        new
                        {
                            Id = 25,
                            Name = "گیلان"
                        },
                        new
                        {
                            Id = 26,
                            Name = "لرستان"
                        },
                        new
                        {
                            Id = 27,
                            Name = "مازندران"
                        },
                        new
                        {
                            Id = 28,
                            Name = "مرکزی"
                        },
                        new
                        {
                            Id = 29,
                            Name = "هرمزگان"
                        },
                        new
                        {
                            Id = 30,
                            Name = "همدان"
                        },
                        new
                        {
                            Id = 31,
                            Name = "یزد"
                        });
                });

            modelBuilder.Entity("AppDomainCore.SubCategorys.Entity.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1083),
                            IsDelete = false,
                            Title = "بنایی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1085)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1087),
                            IsDelete = false,
                            Title = "دکوراسیون",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1087)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1120),
                            IsDelete = false,
                            Title = "نقاشی ساختمان",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1120)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1122),
                            IsDelete = false,
                            Title = "درب و پنجره",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1122)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1123),
                            IsDelete = false,
                            Title = "آهنگری و جوشکاری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1124)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1125),
                            IsDelete = false,
                            Title = "باغبانی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1125)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1126),
                            IsDelete = false,
                            Title = "سرمایش و گرمایش",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1126)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1127),
                            IsDelete = false,
                            Title = "لوله کشی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1128)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1129),
                            IsDelete = false,
                            Title = "برقو الکترونیک",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1129)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1130),
                            IsDelete = false,
                            Title = "تلفن و سانترال",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1130)
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1131),
                            IsDelete = false,
                            Title = "خودرو",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1132)
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1133),
                            IsDelete = false,
                            Title = "اسبابکشی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1133)
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1134),
                            IsDelete = false,
                            Title = "حمل بار",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1134)
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1135),
                            IsDelete = false,
                            Title = "لوازم آشپزخانه",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1136)
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 5,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1137),
                            IsDelete = false,
                            Title = "لوازم شست و شو",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1137)
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 5,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1138),
                            IsDelete = false,
                            Title = "لوازم صوتی و تصویری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1139)
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 6,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1140),
                            IsDelete = false,
                            Title = "ماشین آلات اداری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1140)
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 6,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1141),
                            IsDelete = false,
                            Title = "مبلمان اداری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1141)
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 7,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1143),
                            IsDelete = false,
                            Title = "نظافت",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1143)
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 7,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1144),
                            IsDelete = false,
                            Title = "خشک شویی و اتوشویی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1144)
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 7,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1145),
                            IsDelete = false,
                            Title = "قالی شویی و مبل شویی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1146)
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 7,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1147),
                            IsDelete = false,
                            Title = "سمپاشی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1147)
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 8,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1148),
                            IsDelete = false,
                            Title = "موبایل و تبلت",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1148)
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 8,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1149),
                            IsDelete = false,
                            Title = "خدمات کامپیوتری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1150)
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 8,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1151),
                            IsDelete = false,
                            Title = "امنیت و شبکه",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1151)
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 9,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1152),
                            IsDelete = false,
                            Title = "معاینه پزشک",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1152)
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 9,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1153),
                            IsDelete = false,
                            Title = "داروخانه",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1154)
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 9,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1155),
                            IsDelete = false,
                            Title = "مشاوره",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(1155)
                        });
                });

            modelBuilder.Entity("AppDomainCore.Users.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            ConcurrencyStamp = "7f1b7574-d0c6-4d0a-97e0-61f5823cf107",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENGqqy1g4yamlORIeeOew9akZ9TR62PEqnYrAQ8GadBGNGu4YTeSXfqXVWYld34uzQ==",
                            Phone = "09121111111",
                            PhoneNumberConfirmed = false,
                            PhotoId = 1,
                            ProvinceId = 1,
                            SecurityStamp = "21adccce-8f1e-4be4-b624-d3ff824b19c2",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            ConcurrencyStamp = "bad0a422-1677-4610-9c8f-396d0b394303",
                            Email = "expert@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EXPERT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDA7vevYEQfN/AL2cKlmd4YpnsFycJIs6OtSe9/poiqgvtREYUbI6A3G9A1SrZrNaQ==",
                            Phone = "09121111112",
                            PhoneNumberConfirmed = false,
                            PhotoId = 2,
                            ProvinceId = 2,
                            SecurityStamp = "d939a626-d6d4-42fb-82d1-9cfd6fc13295",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            ConcurrencyStamp = "b9686e79-6649-4d0b-b76f-3859c65ecab4",
                            Email = "expert@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EXPERT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJutUCOIEjFkEZGdWJP2+QKfYTCi6ZJ5zpt9MxSWFj3iWVo07wsqeazce9tDgszSFw==",
                            Phone = "09121111112",
                            PhoneNumberConfirmed = false,
                            PhotoId = 3,
                            ProvinceId = 3,
                            SecurityStamp = "ea75dd5e-f528-443b-99ff-ac4ec17dc359",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            ConcurrencyStamp = "5205283c-e65c-4f4f-a28c-79dbe7bbbcf3",
                            Email = "expert@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EXPERT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDiS8vpFMOEnpY4JeJGLY6NTtnYjwu6+qub6T1hi9xzB5vkwwAzUEWe266DFDCCq1Q==",
                            Phone = "09121111112",
                            PhoneNumberConfirmed = false,
                            PhotoId = 4,
                            ProvinceId = 4,
                            SecurityStamp = "a5af52b7-a4ae-41fd-8d2f-7cd7e451acd7",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            ConcurrencyStamp = "fb2bb722-0b3a-4b6c-85a7-5b47f6f3da79",
                            Email = "customer@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COSTOMER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC+wdWYU5VeCZ5ZgJcnQ7L4tv4xOY5nLs1GU9PJ5+VzbOcRSkL2hCEWNem9SjnnwYA==",
                            Phone = "09121111112",
                            PhoneNumberConfirmed = false,
                            PhotoId = 5,
                            ProvinceId = 5,
                            SecurityStamp = "e53307bf-e9cc-43f7-9d4f-f71596e88197",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            ConcurrencyStamp = "3a74af51-cf8a-452c-93e2-cb88571b2d3a",
                            Email = "customer@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COSTOMER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDjDlNcnzR/S2B2gF7q/cL/D+EP5KA9MdrY/9UVHW3kL77kEaSc43oZsfRhCO3x98w==",
                            Phone = "09121111112",
                            PhoneNumberConfirmed = false,
                            PhotoId = 6,
                            ProvinceId = 6,
                            SecurityStamp = "65010b2f-2ffb-4a9b-819d-6fc4a69d5f7b",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Balance = 0.0,
                            ConcurrencyStamp = "e20ef451-f6cb-4e9b-a33a-a60f6fbf7104",
                            Email = "customer@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "COSTOMER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAse+PXfgwo0bZmGLsUFyQ6Xh5+Alz8SZItJpYV+cVEM4JFlZVV8eObbEUax4jQlxA==",
                            Phone = "09121111112",
                            PhoneNumberConfirmed = false,
                            PhotoId = 7,
                            ProvinceId = 7,
                            SecurityStamp = "e5684ce1-1ec5-413a-a7c5-aa43195f563c",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("AppDomainCore.Works.Entity.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CorePrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Viwe")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Works");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorePrice = 500.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3543),
                            Description = "انجام انواع امور پی ریزی",
                            IsDelete = false,
                            SubCategoryId = 1,
                            Title = "پی ریزی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3544)
                        },
                        new
                        {
                            Id = 2,
                            CorePrice = 1000.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3548),
                            Description = "انجام انواع امور بلوک گذاری و دیوار چینی",
                            IsDelete = false,
                            SubCategoryId = 1,
                            Title = "بلوک گذاری و دیوار چینی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3549)
                        },
                        new
                        {
                            Id = 3,
                            CorePrice = 600.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3550),
                            Description = "انجام انواع امور مرتبط با کف ساختمان",
                            IsDelete = false,
                            SubCategoryId = 1,
                            Title = "کف ساختمان",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3551)
                        },
                        new
                        {
                            Id = 4,
                            CorePrice = 6000.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3552),
                            Description = "انجام انواع امور نوسازی ساختمان های قدیمی یا نیازمند تغییر",
                            IsDelete = false,
                            SubCategoryId = 1,
                            Title = "نوسازی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3552)
                        },
                        new
                        {
                            Id = 5,
                            CorePrice = 500.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3554),
                            Description = "انجام انواع امور سیمان کاری",
                            IsDelete = false,
                            SubCategoryId = 1,
                            Title = "سیمان کاری",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3554)
                        },
                        new
                        {
                            Id = 6,
                            CorePrice = 500.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3555),
                            Description = "انجام انواع امور دکور آشپزخانه",
                            IsDelete = false,
                            SubCategoryId = 2,
                            Title = "دکور آشپزخانه",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3556)
                        },
                        new
                        {
                            Id = 7,
                            CorePrice = 580.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3557),
                            Description = "انجام انواع امور دکور حال و پذیرایی",
                            IsDelete = false,
                            SubCategoryId = 2,
                            Title = "دکور حال و پذیرایی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3557)
                        },
                        new
                        {
                            Id = 8,
                            CorePrice = 400.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3559),
                            Description = "انجام انواع امور دکور اتاق خواب",
                            IsDelete = false,
                            SubCategoryId = 2,
                            Title = "دکور اتاق خواب",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3559)
                        },
                        new
                        {
                            Id = 9,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3560),
                            Description = "انجام انواع امور طراحی و دیزاین ساختمان",
                            IsDelete = false,
                            SubCategoryId = 2,
                            Title = "طراحی و دیزاین ساختمان",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3560)
                        },
                        new
                        {
                            Id = 10,
                            CorePrice = 1500.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3562),
                            Description = "انجام انواع امور معماری داخلی",
                            IsDelete = false,
                            SubCategoryId = 2,
                            Title = "معماری داخلی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3562)
                        },
                        new
                        {
                            Id = 11,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3564),
                            Description = "انجام انواع امور نقاشی داخل ساختمان",
                            IsDelete = false,
                            SubCategoryId = 3,
                            Title = "نقاشی داخل ساختمان",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3564)
                        },
                        new
                        {
                            Id = 12,
                            CorePrice = 300.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3565),
                            Description = "انجام انواع امور نقاشی خارج ساختمان",
                            IsDelete = false,
                            SubCategoryId = 3,
                            Title = "نقاشی خارج ساختمان",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3566)
                        },
                        new
                        {
                            Id = 13,
                            CorePrice = 200.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3567),
                            Description = "انجام انواع امور تعمیرات درب و پنجره",
                            IsDelete = false,
                            SubCategoryId = 4,
                            Title = "تعمیرات درب و پنجره",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3567)
                        },
                        new
                        {
                            Id = 14,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3569),
                            Description = "انجام انواع امور سفارش درب و پنجرهن",
                            IsDelete = false,
                            SubCategoryId = 4,
                            Title = "سفارش درب و پنجره",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3569)
                        },
                        new
                        {
                            Id = 15,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3570),
                            Description = "انجام انواع امور آهنگری و جوشکاری لوازم و غیره",
                            IsDelete = false,
                            SubCategoryId = 5,
                            Title = "آهنگری و جوشکاری لوازم و غیره",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3570)
                        },
                        new
                        {
                            Id = 16,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3572),
                            Description = "انجام انواع امور آهنگری و جوشکاری ساختمانی",
                            IsDelete = false,
                            SubCategoryId = 5,
                            Title = "آهنگری و جوشکاری ساختمانی",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3572)
                        },
                        new
                        {
                            Id = 17,
                            CorePrice = 500.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3573),
                            Description = "انجام انواع امور باغبانی ساختمان ها ومجتمع ها",
                            IsDelete = false,
                            SubCategoryId = 6,
                            Title = "باغبانی ساختمان ها ومجتمع ها ",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3574)
                        },
                        new
                        {
                            Id = 18,
                            CorePrice = 800.0,
                            CreateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3575),
                            Description = "انجام انواع امور باغبانی فضای شهری و سازمان ها",
                            IsDelete = false,
                            SubCategoryId = 6,
                            Title = "باغبانی فضای شهری و سازمان ها",
                            UpdateAt = new DateTime(2025, 2, 21, 0, 27, 13, 730, DateTimeKind.Utc).AddTicks(3575)
                        });
                });

            modelBuilder.Entity("ExpertWork", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("WorksId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "WorksId");

                    b.HasIndex("WorksId");

                    b.ToTable("ExpertWork");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppDomainCore.Admins.Entity.Admin", b =>
                {
                    b.HasOne("AppDomainCore.Users.Entity.User", "user")
                        .WithOne("Admins")
                        .HasForeignKey("AppDomainCore.Admins.Entity.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("AppDomainCore.Categorys.Entity.Category", b =>
                {
                    b.HasOne("AppDomainCore.Photos.Entity.Photo", "Photo")
                        .WithOne("Category")
                        .HasForeignKey("AppDomainCore.Categorys.Entity.Category", "PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("AppDomainCore.Comments.Entity.Comment", b =>
                {
                    b.HasOne("AppDomainCore.Customers.Entity.Customer", "Customers")
                        .WithMany("Comments")
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Experts.Entity.Expert", "Experts")
                        .WithMany("Comments")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customers");

                    b.Navigation("Experts");
                });

            modelBuilder.Entity("AppDomainCore.Customers.Entity.Customer", b =>
                {
                    b.HasOne("AppDomainCore.Users.Entity.User", "User")
                        .WithOne("Customers")
                        .HasForeignKey("AppDomainCore.Customers.Entity.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppDomainCore.CustomersRequests.Entity.CustomersRequest", b =>
                {
                    b.HasOne("AppDomainCore.Customers.Entity.Customer", "Customer")
                        .WithMany("CustomersRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Works.Entity.Work", "Work")
                        .WithMany("Customers")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("AppDomainCore.Experts.Entity.Expert", b =>
                {
                    b.HasOne("AppDomainCore.Users.Entity.User", "User")
                        .WithOne("Experts")
                        .HasForeignKey("AppDomainCore.Experts.Entity.Expert", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppDomainCore.ExpertsRequests.Entity.ExpertsRequest", b =>
                {
                    b.HasOne("AppDomainCore.CustomersRequests.Entity.CustomersRequest", "CustomersRequest")
                        .WithMany()
                        .HasForeignKey("CustomersRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Experts.Entity.Expert", "Expert")
                        .WithMany("ExpertsRequests")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomersRequest");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("AppDomainCore.Photos.Entity.Photo", b =>
                {
                    b.HasOne("AppDomainCore.CustomersRequests.Entity.CustomersRequest", "Customer")
                        .WithMany("Photo")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AppDomainCore.SubCategorys.Entity.SubCategory", b =>
                {
                    b.HasOne("AppDomainCore.Categorys.Entity.Category", "Category")
                        .WithMany("subCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Photos.Entity.Photo", "Photo")
                        .WithOne("SubCategory")
                        .HasForeignKey("AppDomainCore.SubCategorys.Entity.SubCategory", "PhotoId");

                    b.Navigation("Category");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("AppDomainCore.Users.Entity.User", b =>
                {
                    b.HasOne("AppDomainCore.Photos.Entity.Photo", "Photo")
                        .WithOne("User")
                        .HasForeignKey("AppDomainCore.Users.Entity.User", "PhotoId");

                    b.HasOne("AppDomainCore.Provinces.Entity.Province", "Province")
                        .WithMany("User")
                        .HasForeignKey("ProvinceId");

                    b.Navigation("Photo");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("AppDomainCore.Works.Entity.Work", b =>
                {
                    b.HasOne("AppDomainCore.Photos.Entity.Photo", "Photo")
                        .WithOne("Work")
                        .HasForeignKey("AppDomainCore.Works.Entity.Work", "PhotoId");

                    b.HasOne("AppDomainCore.SubCategorys.Entity.SubCategory", "SubCategory")
                        .WithMany("works")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("ExpertWork", b =>
                {
                    b.HasOne("AppDomainCore.Experts.Entity.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Works.Entity.Work", null)
                        .WithMany()
                        .HasForeignKey("WorksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AppDomainCore.Users.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AppDomainCore.Users.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppDomainCore.Users.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AppDomainCore.Users.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppDomainCore.Categorys.Entity.Category", b =>
                {
                    b.Navigation("subCategories");
                });

            modelBuilder.Entity("AppDomainCore.Customers.Entity.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CustomersRequests");
                });

            modelBuilder.Entity("AppDomainCore.CustomersRequests.Entity.CustomersRequest", b =>
                {
                    b.Navigation("Photo");
                });

            modelBuilder.Entity("AppDomainCore.Experts.Entity.Expert", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ExpertsRequests");
                });

            modelBuilder.Entity("AppDomainCore.Photos.Entity.Photo", b =>
                {
                    b.Navigation("Category");

                    b.Navigation("SubCategory");

                    b.Navigation("User");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("AppDomainCore.Provinces.Entity.Province", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("AppDomainCore.SubCategorys.Entity.SubCategory", b =>
                {
                    b.Navigation("works");
                });

            modelBuilder.Entity("AppDomainCore.Users.Entity.User", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Customers");

                    b.Navigation("Experts");
                });

            modelBuilder.Entity("AppDomainCore.Works.Entity.Work", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
